import os
from collections import defaultdict
import time

from apiCalling import clear_report_log, dynamicAnalysis
from utils import is_Proccessed, load_label_info


class malwareClassification:
    def __init__(self):
        # input path
        self.DATASET_DIR = ""
        self.SAMPLE_FOLDER = ""
        self.DATA_DESCRIPTION = ""
        # output path
        self.JSON_PATH = "json"
        self.INFO_CSV = "info_csv"
        self.FEATURE_CSV = "feature_csv"
        self.GRAPH = "graph"
        # api token
        self.API_TOKEN = ""
        # dynamic analysis wait time (sec)
        self.BASE_TIME = 100  # at least wait for BASE_TIME sec
        self.REQUEST_INTERVAL = (
            2  # then check if it is finished every REQUEST_INTERVAL sec
        )
        self.MAX_WAIT_TIME = 300  # if wait over MAX_WAIT_TIME sec, skip
        # balance the number of the sample in every family
        self.NUM_OF_EACH_FAMILY = 10
        # load data description
        self.label_info = load_label_info(
            os.path.join(self.DATASET_DIR, self.DATA_DESCRIPTION)
        )

    def dynamic_analysis(self):
        if self.label_info is None:
            print("Data description was not loaded correctly.")
            return
        malware_dir_path = os.path.join(self.DATASET_DIR, self.DATA_DESCRIPTION)
        file_list = os.listdir(malware_dir_path)
        processed_list = os.listdir(self.JSON_PATH)
        processed_list = [
            os.path.splitext(file_name)[0] for file_name in processed_list
        ]
        processed_count = defaultdict(int)
        dynamic_analysis = dynamicAnalysis(self.API_TOKEN)
        for file in file_list:
            label = self.label_info.get(file)
            if not label:
                print("The file is not recorded in data description.")
                continue
            if processed_count[label] > self.NUM_OF_EACH_FAMILY:
                continue
            if is_Proccessed(processed_list, file):
                processed_count[label] += 1
                continue
            task_id = dynamic_analysis.get_analysis_report_id(
                malware_dir_path, file
            )
            if task_id < 0:
                print("The file is not processed successfully.")
                continue
            time.sleep(self.BASE_TIME)
            wait_time_counter = self.BASE_TIME
            file_name = os.path.splitext(file)[0]
            while wait_time_counter < self.MAX_WAIT_TIME:
                status_code = dynamic_analysis.save_report(
                    self.JSON_PATH, file_name, task_id
                )
                if status_code is 200:
                    break
                time.sleep(self.REQUEST_INTERVAL)
                wait_time_counter += self.REQUEST_INTERVAL

    def generate_image(self):
        pass
